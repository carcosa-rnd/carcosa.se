(self.webpackChunkcarcosa_se=self.webpackChunkcarcosa_se||[]).push([[824],{3334:function(e,t,a){"use strict";a.r(t),a.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return d},toc:function(){return m},default:function(){return c}});var n=a(2122),i=a(9756),o=(a(7294),a(3905)),r=["components"],s={},l="Git Standards",d={unversionedId:"handbook/git",id:"handbook/git",isDocsHomePage:!1,title:"Git Standards",description:"Here at Carcosa, we're following conventional commits specification in writing commit messages. Having a coherent and standardized commit structure help us involved in a project understand the changes that have occured and write them easier.",source:"@site/docs/handbook/git.md",sourceDirName:"handbook",slug:"/handbook/git",permalink:"/docs/handbook/git",editUrl:"https://github.com/carcosa-rnd/carcosa.se/edit/master/docs/handbook/git.md",tags:[],version:"current",frontMatter:{},sidebar:"carcosaSidebar",previous:{title:"Values",permalink:"/docs/handbook/values"},next:{title:"React and node.js developer",permalink:"/docs/hiring/developer"}},m=[{value:"Structure",id:"structure",children:[]},{value:"Types",id:"types",children:[]},{value:"Description",id:"description",children:[]},{value:"Scope (optional)",id:"scope-optional",children:[]},{value:"Breaking Changes",id:"breaking-changes",children:[]},{value:'<span id="examples">Examples</span>',id:"examples",children:[{value:"Commit message with no body",id:"commit-message-with-no-body",children:[]},{value:"Commit message with scope",id:"commit-message-with-scope",children:[]},{value:"Commit message with description and breaking change footer",id:"commit-message-with-description-and-breaking-change-footer",children:[]},{value:"Commit message with ! to draw attention to breaking change",id:"commit-message-with--to-draw-attention-to-breaking-change",children:[]},{value:"Commit message with scope and ! to draw attention to breaking change",id:"commit-message-with-scope-and--to-draw-attention-to-breaking-change",children:[]},{value:"Commit message with multi-paragraph body and multiple footers",id:"commit-message-with-multi-paragraph-body-and-multiple-footers",children:[]}]},{value:"Fixing up commits",id:"fixing-up-commits",children:[]}],p={toc:m};function c(e){var t=e.components,a=(0,i.Z)(e,r);return(0,o.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"git-standards"},"Git Standards"),(0,o.kt)("p",null,"Here at Carcosa, we're following ",(0,o.kt)("a",{parentName:"p",href:"https://www.conventionalcommits.org/en/v1.0.0-beta.4/"},"conventional commits")," specification in writing commit messages. Having a coherent and standardized commit structure help us involved in a project understand the changes that have occured and write them easier."),(0,o.kt)("h2",{id:"structure"},"Structure"),(0,o.kt)("p",null,"The commit message should be structured as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"<type>[optional scope]: <description>\n\n[optional body]\n\n[optional footer(s)]\n")),(0,o.kt)("p",null,"See ",(0,o.kt)("a",{href:"#examples"},"examples")," below."),(0,o.kt)("h2",{id:"types"},"Types"),(0,o.kt)("p",null,"Commits MUST be prefixed with a type, which consists of a noun, ",(0,o.kt)("inlineCode",{parentName:"p"},"feat"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"fix"),", etc., followed by the ",(0,o.kt)("inlineCode",{parentName:"p"},"OPTIONAL scope"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"OPTIONAL !"),", and REQUIRED terminal colon and space."),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Type"),(0,o.kt)("th",{parentName:"tr",align:null},"Meaning"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"feat"),(0,o.kt)("td",{parentName:"tr",align:null},"Features"),(0,o.kt)("td",{parentName:"tr",align:null},"MUST be used when a commit adds a new feature to your application or library.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"fix"),(0,o.kt)("td",{parentName:"tr",align:null},"Bug Fixes"),(0,o.kt)("td",{parentName:"tr",align:null},"MUST be used when a commit represents a bug fix for your application.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"style"),(0,o.kt)("td",{parentName:"tr",align:null},"Styles"),(0,o.kt)("td",{parentName:"tr",align:null},"Changes that do not affect the meaning of the code (white\xad-space, format\xadting, missing semi-c\xadolons, etc)")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"refactor"),(0,o.kt)("td",{parentName:"tr",align:null},"Code Refact\xadoring"),(0,o.kt)("td",{parentName:"tr",align:null},"A code change that neither fixes a bug nor adds a feature")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"perf"),(0,o.kt)("td",{parentName:"tr",align:null},"Perfor\xadmance Improv\xadements"),(0,o.kt)("td",{parentName:"tr",align:null},"A code change that improves perfor\xadmance")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"test"),(0,o.kt)("td",{parentName:"tr",align:null},"Tests"),(0,o.kt)("td",{parentName:"tr",align:null},"Adding missing tests or correcting existing tests")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"build"),(0,o.kt)("td",{parentName:"tr",align:null},"Builds"),(0,o.kt)("td",{parentName:"tr",align:null},"Changes that affect the build system or external depend\xadencies (example scopes: gulp, broccoli, npm)")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"ci"),(0,o.kt)("td",{parentName:"tr",align:null},"Continuous Integr\xadations"),(0,o.kt)("td",{parentName:"tr",align:null},"Changes to our CI config\xaduration files and scripts (example scopes: Travis, Circle, Browse\xadrStack, SauceLabs)")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"chore"),(0,o.kt)("td",{parentName:"tr",align:null},"Chores"),(0,o.kt)("td",{parentName:"tr",align:null},"Other changes that don\u2019t modify src or test files")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"revert"),(0,o.kt)("td",{parentName:"tr",align:null},"Reverts"),(0,o.kt)("td",{parentName:"tr",align:null},"Reverts a previous commit")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"docs"),(0,o.kt)("td",{parentName:"tr",align:null},"Documentation"),(0,o.kt)("td",{parentName:"tr",align:null},"Documentation only changes")))),(0,o.kt)("h2",{id:"description"},"Description"),(0,o.kt)("p",null,"A description should describe your changes in imperative mood.This means you need to eliminate the temptation to use gerunds or past tense in your description line. Don't write a git commit description line that talks about what you did, or what you are doing. Instead, describe what was done. A description MUST immediately follow the colon and space after the type/scope prefix. The description is a short summary of the code changes, e.g., ",(0,o.kt)("inlineCode",{parentName:"p"},"fix: fix the fencepost error"),"."),(0,o.kt)("h2",{id:"scope-optional"},"Scope (optional)"),(0,o.kt)("p",null,"A scope MAY be provided after a type. A scope MUST consist of a noun describing a section of the codebase surrounded by parenthesis, e.g., ",(0,o.kt)("inlineCode",{parentName:"p"},"feat(ratings): add the ability to add star ratings to posts"),"."),(0,o.kt)("h2",{id:"breaking-changes"},"Breaking Changes"),(0,o.kt)("p",null,"Breaking changes are indicated by putting BREAKING CHANGE: at the start of the message body, for any commit type. Optionally they may be emphasised by appending a ! after the type and scope. The message body should provide appropriate guidance for developers affected by the breaking change."),(0,o.kt)("h2",{id:"examples"},(0,o.kt)("span",{id:"examples"},"Examples")),(0,o.kt)("h3",{id:"commit-message-with-no-body"},"Commit message with no body"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"docs: correct spelling of CHANGELOG\n")),(0,o.kt)("h3",{id:"commit-message-with-scope"},"Commit message with scope"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"feat(lang): add polish language\n")),(0,o.kt)("h3",{id:"commit-message-with-description-and-breaking-change-footer"},"Commit message with description and breaking change footer"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"feat: allow provided config object to extend other configs\n\nBREAKING CHANGE: `extends` key in config file is now used for extending other config files\n")),(0,o.kt)("h3",{id:"commit-message-with--to-draw-attention-to-breaking-change"},"Commit message with ! to draw attention to breaking change"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"refactor!: drop support for Node 6\n")),(0,o.kt)("h3",{id:"commit-message-with-scope-and--to-draw-attention-to-breaking-change"},"Commit message with scope and ! to draw attention to breaking change"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"refactor!: drop support for Node 6\n\nBREAKING CHANGE: refactor to use JavaScript features not available in Node 6.\n")),(0,o.kt)("h3",{id:"commit-message-with-multi-paragraph-body-and-multiple-footers"},"Commit message with multi-paragraph body and multiple footers"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"fix: correct minor typos in code\n\nsee the issue for details\n\non typos fixed.\n\nReviewed-by: Z\nRefs #133\n")),(0,o.kt)("h2",{id:"fixing-up-commits"},"Fixing up commits"),(0,o.kt)("p",null,"If you already made commits and they don't meet the Conventional Commits specification, you have a couple of options:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"if there's only one commit to redo, the easiest option is to use ",(0,o.kt)("inlineCode",{parentName:"li"},"git commit --amend")," with no staged changes, which will allow you to edit the commit message.")))}c.isMDXComponent=!0}}]);